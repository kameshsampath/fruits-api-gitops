- name: Ensure cert-manager k8s context
  fail:
    msg: 'Please define the kubernetes context to install cert-manager with variable "kubernetes_spices_cert_manager_k8s_context"'
  when: kubernetes_spices_cert_manager_k8s_context is not defined

- name: "Add cert-manager Helm Repo"
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: "https://charts.jetstack.io"

- name: "Refresh helm repo"
  ansible.builtin.command:
    argv:
      - helm
      - repo
      - update 

- name: "Query cert-manager Versions"
  ansible.builtin.command:
    argv:
      - helm
      - search 
      - repo
      - jetstack/cert-manager
      - -ojson
  register: cert_manager_version_info
  changed_when: false
  when: cert_manager_version is not defined

- name: "Fail when version cert-manager info does not exist"
  fail:
    msg: "cert-manager Version not available"
  when: cert_manager_version is not defined and cert_manager_version_info.stdout is not defined

- name: Set cert-manager Facts
  set_fact:
    cert_manager_version: "{{ cert_manager_version_info.stdout  | from_json | first | community.general.json_query('version') }}"
  when: cert_manager_version is not defined
  vars:
    q: "status.loadBalancer.ingress[*].ip"

- name: "cert-manager Version"
  debug: 
    var: cert_manager_version

# - name: Download cert-manager CRDS manifest to the cluster.
#   ansible.builtin.get_url:
#     url: "https://github.com/cert-manager/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml"
#     dest: "{{ work_dir }}/cert-manager.crds.yaml"
#     mode: '0664'

# - name:  Install cert-manager CRDS
#   kubernetes.core.k8s:
#     state: present
#     src: "{{ work_dir }}/cert-manager.crds.yaml"

#######
# https://artifacthub.io/packages/helm/cert-manager/cert-manager
#######
- name: "Deploy cert-manager"
  kubernetes.core.helm:
    release_name: cert-manager
    chart_ref: jetstack/cert-manager
    release_namespace: "{{ kubernetes_spices_certm_namespace }}"
    create_namespace: yes
    chart_version: "{{ cert_manager_version }}"
    values:
      installCRDs: true
      # https://github.com/cert-manager/cert-manager/issues/909
      extraArgs: 
        - --dns01-recursive-nameservers="8.8.8.8:53"
        - --dns01-recursive-nameservers-only=true
    update_repo_cache: yes
    context: "{{ kubernetes_spices_cert_manager_k8s_context }}"
    wait: yes

- name: Create Lets Encrypt Issuers Namespace
  kubernetes.core.k8s:
    kind: Namespace
    name: "{{ kubernetes_spices_certm_issuer_namespace }}"
    state: present

- name: "Create Azure DNS Secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: azuredns-{{ azure_dns_zone }}-config
        namespace: "{{ kubernetes_spices_certm_issuer_namespace  }}"
      data:
        client-secret: "{{ ansible_env.AZURE_SECRET | b64encode }}"

- name: "Create GCP Cloud DNS Secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: clouddns-{{ cloud_dns_zone }}-config
        namespace: "{{ kubernetes_spices_certm_issuer_namespace  }}"
      data:
        key.json: |
          {{ lookup('file',ansible_env.GOOGLE_APPLICATION_CREDENTIALS) | b64encode }}

- name: Create Lets Encrypt Issuers
  kubernetes.core.k8s:
    state: present
    namespace: "{{ kubernetes_spices_certm_issuer_namespace}}"
    template:
      - path: "letsencrypt-staging-issuer.yaml.j2"
      - path: "letsencrypt-prod-issuer.yaml.j2"