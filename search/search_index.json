{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Fruits API GitOps demostrates how to use GitOps principles in building and publishing your API using Gloo Edge . As part of this demo we will build a simple Java REST API using Quarkus and publish them them using Gloo Portal .","title":"Overview"},{"location":"clean-up/","text":"At the end of this chapter you would have, Delete minikube clusters Ensure Environment \u00b6 Navigate to Tutorial home cd $DEMO_HOME Set cluster environment variables direnv allow . Destroy minikube clusters \u00b6 make clean-up","title":"Cleanup"},{"location":"clean-up/#ensure-environment","text":"Navigate to Tutorial home cd $DEMO_HOME Set cluster environment variables direnv allow .","title":"Ensure Environment"},{"location":"clean-up/#destroy-minikube-clusters","text":"make clean-up","title":"Destroy minikube clusters"},{"location":"deploy/","text":"At the end of chapter you would have, Deployed Tekton tasks and pipelines reuqired to build Fruits API Deployed the Argocd Application to deploy Fruits API Configure the Fruits API Webhook with Gitea Ensure Environment \u00b6 direnv allow . GitOps with Argocd and Tektoncd \u00b6 As part of the demo we will be using tektoncd to perform the CI part of building the container image and argocd to do the CD part of synchnronizing the clusters using GitOps. Deploy Tektoncd Tasks \u00b6 The following Tektoncd community tasks will be used by the FruitsAPI as part of the application build, since tektoncd does not install these out of the box we wil install them manually, maven \u00b6 tkn hub install task maven \\ --version = 0 .2 \\ --context = \" $CLUSTER1 \" git-clone \u00b6 tkn hub install task git-clone \\ --version = 0 .5 \\ --context = \" $CLUSTER1 \" buildah \u00b6 tkn hub install task buildah \\ --version = 0 .3 \\ --context = \" $CLUSTER1 \" openshift-client \u00b6 tkn hub install task openshift-client \\ --version = 0 .2 \\ --context = \" $CLUSTER1 \" Tip You can also install all the tasks using the make target make install-pipeline-tasks Create Tektoncd pipelines \u00b6 As the pipelines will build and push the container image to quay.io it is required to have the following two variables set in your environment, export QUAYIO_USERNAME = <your github username> export QUAYIO_PASSWORD = <your QUAY.io password/token> Create the pipeline fruits-api-deploy , kustomize build pipelines \\ | envsubst \\ | kubectl apply --context $CLUSTER1 -f - Tekton Triggers \u00b6 The Tekton Triggers take care of rebuilding the application as and when the new code is committed into the Git repository. Get the gloo gateway-proxy LoadBalancer ip to configure the gloo routes and the same will be used to configure the Git Webhooks later, export GLOO_GATEWAY_PROXY_IP = \" $( kubectl --context = \" $CLUSTER1 \" -n gloo-system get svc gateway-proxy -ojsonpath = '{.status.loadBalancer.ingress[*].ip}' ) \" Verify to see if it has value set, echo \" ${ GLOO_GATEWAY_PROXY_IP } \" Create Tekton Triggers that will run the image build once changes are pushed to fruits-api, kustomize build triggers \\ | envsubst | kubectl apply --context $CLUSTER1 -f - Wait for the Gitea event listener webhook to be running, kubectl --context = $CLUSTER1 \\ rollout status deploy/el-gitea-webhook --timeout = 120s The default Gitea credentials is gitea/password . Add Gitea Repository to Argocd \u00b6 As the Gitea repository we will be using local and uses self signed certificates, let us configure that in Argocd to skip sslVerify , Login to Argocd, # make sure we are in mgmt kubernetes context kubectl config use-context mgmt argocd login --insecure \\ \" $( yq e '.serviceUrl' $DEMO_WORK_DIR /argocd_details.yaml | cut -d '/' -f3 ) \" \\ --username \" ${ ARGOCD_ADMIN_USERNAME } \" \\ --password \" ${ ARGOCD_ADMIN_PASSWORD } \" Add the local Gitea repository, argocd repo add \" $( yq e '.gitea_url' work/gitea_details.yaml ) / ${ GITEA_USERNAME } /fruits-api-gitops.git\" --username \" ${ GITEA_USERNAME } \" --password \" ${ GITEA_PASSWORD } \" Create Application \u00b6 Query the cluster1 info to get the cluster API URL and run the following command to create fruits-api ArgoCD application. # Ensures colors are also removed form output export TARGET_CLUSTER = \" $( kubectl --context = \" $CLUSTER1 \" cluster-info | sed 's/\\x1b\\[[0-9;]*m//g' | awk 'NR==1{print $7}' ) \" yq eval \\ '.spec.destination.server = strenv(TARGET_CLUSTER) | .spec.source.repoURL = strenv(FRUITS_API_GITOPS_REPO_URL)' \\ manifests/app/app.yaml \\ | kubectl --context = \" $MGMT \" apply -n argocd -f - The Argocd application will apply the helm chart $DEMO_HOME/charts/fruits-api using Helm values from $DEMO_HOME/helm_vars/fruits-api/values.yaml . The helm values supports by the chart are, replicaCount : 1 # Gloo Portal Configuration enablePortal : false # Enable Gloo Portal RBAC enableRBAC : false # The Portal suffix to use with Gloo Dev Portal # e.g. api.kameshs.me, portal.kamesh.me portalDomainSuffix : kameshs.me # Fruits Portal configuration portal : demo : apiKey : 'Nzg4Y2VkODQtZTdlMS1mMzc0LWFhZGMtMGJjNDk4YmM5YTVl' plan : basic username : dev1 # DB Configuration to be used with Fruits API postgresql : global : postgresql : postgresqlDatabase : fruitsdb postgresqlUsername : postgres postgresqlPassword : password servicePort : 5432 # the ConfigMap that will hold the DB init script initdbScriptsConfigMap : postgres-schema # The fruits-api image to be used in the deployment image : name : quay.io/kameshsampath/fruits-api pullPolicy : Always tag : \"\" imagePullSecrets : [ ] nameOverride : \"\" fullnameOverride : \"\" serviceAccount : # Specifies whether a service account should be created create : true # Annotations to add to the service account annotations : { } # The name of the service account to use. # If not set and create is true, a name is generated using the fullname template name : \"\" podAnnotations : { } podSecurityContext : { } # fsGroup: 2000 securityContext : { } # capabilities: # drop: # - ALL # readOnlyRootFilesystem: true # runAsNonRoot: true # runAsUser: 1000 # The fruits-api Kubernetes Service service : type : ClusterIP port : 8080 # the pod resource limit and requests resources : limits : cpu : 512m memory : 1Gi requests : cpu : 256m memory : 512Mi # Kubernetes NodeSelector Labels nodeSelector : { } # Kubernetes Pod Tolerations tolerations : [ ] # Kubernetes Pod Affinity affinity : { } Wait for few mins while argocd synchronizes the resource. Trigger Pipeline \u00b6 Once you see the resources synchronized you will see the image pull backoff as the version of image quay.io/kameshsampath/fruits-api:1.0.0 is not yet available in the repo. Lets trigger the pipeline to build and deploy the image to quay.io repository, The trigger should have started a pipeline, tkn pr --context = \" ${ CLUSTER1 } \" ls The command should show an output like, NAME STARTED DURATION STATUS fruits-api-vqpbl 26 seconds ago --- Running You can get the logs of the pipeline by, tkn pr --context = \" ${ CLUSTER1 } \" logs -f <pipeline id form earlier command> e.g. tkn pr --context=\"${CLUSTER1}\" logs -f fruits-api-vqpbl Note The pipeline NAME may vary in your setup The first pipeline run will take time as it will cache maven artifacts to the nexus repository manager running in cluster1 The sucessful pipeline should push the image to quay.io. Wait for few mins before Argocd updates the deployment with the pushed image and show fruits-api pod running successfully. Routes \u00b6 As we have already deployed the Gloo Edge, the service should have been auto discovered via Gloo. Let us run the following command to verify it, kubectl --context = \" ${ CLUSTER1 } \" get upstream default-fruits-api-8080 \\ -n gloo-system -o yaml Lets create route to access the API, cat <<EOF | kubectl --context=\"${CLUSTER1}\" apply -f - apiVersion: gateway.solo.io/v1 kind: VirtualService metadata: name: fruits-api-http namespace: gloo-system spec: virtualHost: domains: - fruits-api-${GLOO_GATEWAY_PROXY_IP}.nip.io routes: - matchers: - prefix: / routeAction: single: upstream: name: default-fruits-api-8080 namespace: gloo-system EOF Now calling the service will return a list of fruits. http \"fruits-api- ${ GLOO_GATEWAY_PROXY_IP } .nip.io/api/fruits\" Lets delete the test route we have created as we will be using the Gloo Developer Portal to access the API. kubectl --context = \" ${ CLUSTER1 } \" delete vs -n gloo-system fruits-api-http Portal \u00b6 To enable porta edit and update the $DEMO_HOME/helm_vars/fruits-api/values.yaml enablePortal to true . Commit and push the code to git repository to see the Argocd synchronizing the application to create the new Gloo Portal resources, yq -i e '.enablePortal=true' $DEMO_HOME /helm_vars/fruits-api/values.yaml git commit $DEMO_HOME /helm_vars/fruits-api/values.yaml -m \"Enable Portal\" git push dev main Wait for Argocd to synchroize the commit, once the commit is synchronized you should see the following Gloo Portal resources created in the default namespace, kubectl --context = \" ${ CLUSTER1 } \" get apidocs,apiproducts,portal,environment -oname apidoc.portal.gloo.solo.io/fruits-api-apidoc-v1 apiproduct.portal.gloo.solo.io/fruits-api portal.portal.gloo.solo.io/fruits-api environment.portal.gloo.solo.io/fruits-api-dev Now you can open the portal on your browser using the domain http://portal.kameshs.me Tip Update your /etc/hosts as shown to allow accessing the portal using domain names 192 .168.64.100 api.kameshs.me api 192 .168.64.100 portal.kameshs.me portal Where 192.168.64.100 is the Gloo Gateway proxy address $GLOO_GATEWAY_PROXY_IP Enable Authentication \u00b6 As you have observed by navigating to the APIs that all APIs are read only. To make the portal accessible we need to enable authentication. To enable portal edit and update the $DEMO_HOME/helm_vars/fruits-api/values.yaml enablePortal to true . Commit and push the code to git repository to see the Argocd synchronizing the application to create the new Gloo Portal resources, yq -i e '.enableRBAC=true' $DEMO_HOME /helm_vars/fruits-api/values.yaml git commit $DEMO_HOME /helm_vars/fruits-api/values.yaml -m \"Enable Portal RBAC\" git push dev main Now hit the login button and try login to the portal using the user dev1 and password mysecurepassword . Now when you check the APIs section it has the Try out option that allows you try the APIs. When you try the API from CLI, http api.kameshs.me/fruits/v1/api/fruits You should see you are not authorized, HTTP/1.1 401 Unauthorized content-length: 0 date: Wed, 08 Dec 2021 04:39:54 GMT server: envoy www-authenticate: API key is missing or invalid The enableRBAC generates a default demo API key Nzg4Y2VkODQtZTdlMS1mMzc0LWFhZGMtMGJjNDk4YmM5YTVl that can be used to test the Authentication. http api.kameshs.me/fruits/v1/api/fruits \"api-key: $API_KEY \" The API Key secret is stored in the gloo-system namespace, you can query it using the command: kubectl --context = ${ CLUSTER1 } get secrets -n gloo-system -lusageplans.portal.gloo.solo.io = basic -o yaml | yq e '.items[0].data[\"api-key\"]' - | base64 -d Tip You can also create API Key secret as shown below, make the note of annotations as they are key for Gloo to recognoize the annotation apiVersion: v1 kind: Secret metadata: labels: apiproducts.portal.gloo.solo.io: fruits-product.default environments.portal.gloo.solo.io: dev.default usageplans.portal.gloo.solo.io: apikey name: fruits-apikey-test namespace: gloo-system type: extauth.solo.io/apikey stringData: api-key: Nzg4Y2VkODQtZTdlMS1mMzc0LWFhZGMtMGJjNDk4YmM5YTVl environment: dev plan: basic product: fruits-product.default username: dev1 Monetization \u00b6 Lets enable access to Admin console of the portal, kubectl --context = \" ${ CLUSTER1 } \" -n gloo-portal port-forward svc/gloo-portal-admin-server 8080 Open the DB Adminer via the browser, export DB_ADMINER_IP = $( kubectl --context = \" ${ CLUSTER1 } \" get svc db-adminer -ojsonpath = '{.status.loadBalancer.ingress[*].ip}' ) Open the url http://$(DB_ADMINER_IP):8080 , use the Postgresql as database with user id postgres and password password . Then run the following SQL command to create the requests tabl using the sql /tmp/gloo-portal-db.sql Lets fire some requests to the API to generate the API calls graph, for i in { 1 ..5 } ; do http api.kameshs.me/fruits/v1/api/fruits \"api-key: $API_KEY \" done As our API plan allows only three requests per minute, you will start to get HTTP 429 after three requests, {{ - if .Values.enablePortal - }} apiVersion : portal.gloo.solo.io/v1beta1 kind : Environment metadata : name : {{ include \"fruits-api.fullname\" . }} -dev namespace : {{ .Release.Namespace }} labels : {{ - include \"fruits-api.labels\" . | nindent 4 }} spec : domains : # the domain name where the API will be exposed - {{ printf \"api.%s\" .Values.portalDomainSuffix }} displayInfo : description : This environment is meant for developers to deploy and test their APIs. displayName : Development {{ if .Values.enableRBAC }} parameters : usagePlans : basic : displayName : Basic plan with API key auth authPolicy : apiKey : { } rateLimit : requestsPerUnit : 3 unit : MINUTE {{ end }} # a global basepath for our APIs basePath : /fruits # we will select our APIProduct using a selector and the 2 version of it apiProducts : - namespaces : - \"*\" labels : - key : app.kubernetes.io/name operator : In values : - {{ include \"fruits-api.name\" . }} versions : names : - v1 # this will dynamically prefix the API with the version names basePath : \"{%version%}\" {{ if .Values.enableRBAC }} usagePlans : - basic {{ end }} gatewayConfig : # we actually want to expose the APIs on a Gateway (optional) disableRoutes : false {{ - end }} But you should see some graphs geneated.","title":"Deploy Microservices"},{"location":"deploy/#ensure-environment","text":"direnv allow .","title":"Ensure Environment"},{"location":"deploy/#gitops-with-argocd-and-tektoncd","text":"As part of the demo we will be using tektoncd to perform the CI part of building the container image and argocd to do the CD part of synchnronizing the clusters using GitOps.","title":"GitOps with Argocd and Tektoncd"},{"location":"deploy/#deploy-tektoncd-tasks","text":"The following Tektoncd community tasks will be used by the FruitsAPI as part of the application build, since tektoncd does not install these out of the box we wil install them manually,","title":"Deploy Tektoncd Tasks"},{"location":"deploy/#maven","text":"tkn hub install task maven \\ --version = 0 .2 \\ --context = \" $CLUSTER1 \"","title":"maven"},{"location":"deploy/#git-clone","text":"tkn hub install task git-clone \\ --version = 0 .5 \\ --context = \" $CLUSTER1 \"","title":"git-clone"},{"location":"deploy/#buildah","text":"tkn hub install task buildah \\ --version = 0 .3 \\ --context = \" $CLUSTER1 \"","title":"buildah"},{"location":"deploy/#openshift-client","text":"tkn hub install task openshift-client \\ --version = 0 .2 \\ --context = \" $CLUSTER1 \" Tip You can also install all the tasks using the make target make install-pipeline-tasks","title":"openshift-client"},{"location":"deploy/#create-tektoncd-pipelines","text":"As the pipelines will build and push the container image to quay.io it is required to have the following two variables set in your environment, export QUAYIO_USERNAME = <your github username> export QUAYIO_PASSWORD = <your QUAY.io password/token> Create the pipeline fruits-api-deploy , kustomize build pipelines \\ | envsubst \\ | kubectl apply --context $CLUSTER1 -f -","title":"Create Tektoncd pipelines"},{"location":"deploy/#tekton-triggers","text":"The Tekton Triggers take care of rebuilding the application as and when the new code is committed into the Git repository. Get the gloo gateway-proxy LoadBalancer ip to configure the gloo routes and the same will be used to configure the Git Webhooks later, export GLOO_GATEWAY_PROXY_IP = \" $( kubectl --context = \" $CLUSTER1 \" -n gloo-system get svc gateway-proxy -ojsonpath = '{.status.loadBalancer.ingress[*].ip}' ) \" Verify to see if it has value set, echo \" ${ GLOO_GATEWAY_PROXY_IP } \" Create Tekton Triggers that will run the image build once changes are pushed to fruits-api, kustomize build triggers \\ | envsubst | kubectl apply --context $CLUSTER1 -f - Wait for the Gitea event listener webhook to be running, kubectl --context = $CLUSTER1 \\ rollout status deploy/el-gitea-webhook --timeout = 120s The default Gitea credentials is gitea/password .","title":"Tekton Triggers"},{"location":"deploy/#add-gitea-repository-to-argocd","text":"As the Gitea repository we will be using local and uses self signed certificates, let us configure that in Argocd to skip sslVerify , Login to Argocd, # make sure we are in mgmt kubernetes context kubectl config use-context mgmt argocd login --insecure \\ \" $( yq e '.serviceUrl' $DEMO_WORK_DIR /argocd_details.yaml | cut -d '/' -f3 ) \" \\ --username \" ${ ARGOCD_ADMIN_USERNAME } \" \\ --password \" ${ ARGOCD_ADMIN_PASSWORD } \" Add the local Gitea repository, argocd repo add \" $( yq e '.gitea_url' work/gitea_details.yaml ) / ${ GITEA_USERNAME } /fruits-api-gitops.git\" --username \" ${ GITEA_USERNAME } \" --password \" ${ GITEA_PASSWORD } \"","title":"Add Gitea Repository to Argocd"},{"location":"deploy/#create-application","text":"Query the cluster1 info to get the cluster API URL and run the following command to create fruits-api ArgoCD application. # Ensures colors are also removed form output export TARGET_CLUSTER = \" $( kubectl --context = \" $CLUSTER1 \" cluster-info | sed 's/\\x1b\\[[0-9;]*m//g' | awk 'NR==1{print $7}' ) \" yq eval \\ '.spec.destination.server = strenv(TARGET_CLUSTER) | .spec.source.repoURL = strenv(FRUITS_API_GITOPS_REPO_URL)' \\ manifests/app/app.yaml \\ | kubectl --context = \" $MGMT \" apply -n argocd -f - The Argocd application will apply the helm chart $DEMO_HOME/charts/fruits-api using Helm values from $DEMO_HOME/helm_vars/fruits-api/values.yaml . The helm values supports by the chart are, replicaCount : 1 # Gloo Portal Configuration enablePortal : false # Enable Gloo Portal RBAC enableRBAC : false # The Portal suffix to use with Gloo Dev Portal # e.g. api.kameshs.me, portal.kamesh.me portalDomainSuffix : kameshs.me # Fruits Portal configuration portal : demo : apiKey : 'Nzg4Y2VkODQtZTdlMS1mMzc0LWFhZGMtMGJjNDk4YmM5YTVl' plan : basic username : dev1 # DB Configuration to be used with Fruits API postgresql : global : postgresql : postgresqlDatabase : fruitsdb postgresqlUsername : postgres postgresqlPassword : password servicePort : 5432 # the ConfigMap that will hold the DB init script initdbScriptsConfigMap : postgres-schema # The fruits-api image to be used in the deployment image : name : quay.io/kameshsampath/fruits-api pullPolicy : Always tag : \"\" imagePullSecrets : [ ] nameOverride : \"\" fullnameOverride : \"\" serviceAccount : # Specifies whether a service account should be created create : true # Annotations to add to the service account annotations : { } # The name of the service account to use. # If not set and create is true, a name is generated using the fullname template name : \"\" podAnnotations : { } podSecurityContext : { } # fsGroup: 2000 securityContext : { } # capabilities: # drop: # - ALL # readOnlyRootFilesystem: true # runAsNonRoot: true # runAsUser: 1000 # The fruits-api Kubernetes Service service : type : ClusterIP port : 8080 # the pod resource limit and requests resources : limits : cpu : 512m memory : 1Gi requests : cpu : 256m memory : 512Mi # Kubernetes NodeSelector Labels nodeSelector : { } # Kubernetes Pod Tolerations tolerations : [ ] # Kubernetes Pod Affinity affinity : { } Wait for few mins while argocd synchronizes the resource.","title":"Create Application"},{"location":"deploy/#trigger-pipeline","text":"Once you see the resources synchronized you will see the image pull backoff as the version of image quay.io/kameshsampath/fruits-api:1.0.0 is not yet available in the repo. Lets trigger the pipeline to build and deploy the image to quay.io repository, The trigger should have started a pipeline, tkn pr --context = \" ${ CLUSTER1 } \" ls The command should show an output like, NAME STARTED DURATION STATUS fruits-api-vqpbl 26 seconds ago --- Running You can get the logs of the pipeline by, tkn pr --context = \" ${ CLUSTER1 } \" logs -f <pipeline id form earlier command> e.g. tkn pr --context=\"${CLUSTER1}\" logs -f fruits-api-vqpbl Note The pipeline NAME may vary in your setup The first pipeline run will take time as it will cache maven artifacts to the nexus repository manager running in cluster1 The sucessful pipeline should push the image to quay.io. Wait for few mins before Argocd updates the deployment with the pushed image and show fruits-api pod running successfully.","title":"Trigger Pipeline"},{"location":"deploy/#routes","text":"As we have already deployed the Gloo Edge, the service should have been auto discovered via Gloo. Let us run the following command to verify it, kubectl --context = \" ${ CLUSTER1 } \" get upstream default-fruits-api-8080 \\ -n gloo-system -o yaml Lets create route to access the API, cat <<EOF | kubectl --context=\"${CLUSTER1}\" apply -f - apiVersion: gateway.solo.io/v1 kind: VirtualService metadata: name: fruits-api-http namespace: gloo-system spec: virtualHost: domains: - fruits-api-${GLOO_GATEWAY_PROXY_IP}.nip.io routes: - matchers: - prefix: / routeAction: single: upstream: name: default-fruits-api-8080 namespace: gloo-system EOF Now calling the service will return a list of fruits. http \"fruits-api- ${ GLOO_GATEWAY_PROXY_IP } .nip.io/api/fruits\" Lets delete the test route we have created as we will be using the Gloo Developer Portal to access the API. kubectl --context = \" ${ CLUSTER1 } \" delete vs -n gloo-system fruits-api-http","title":"Routes"},{"location":"deploy/#portal","text":"To enable porta edit and update the $DEMO_HOME/helm_vars/fruits-api/values.yaml enablePortal to true . Commit and push the code to git repository to see the Argocd synchronizing the application to create the new Gloo Portal resources, yq -i e '.enablePortal=true' $DEMO_HOME /helm_vars/fruits-api/values.yaml git commit $DEMO_HOME /helm_vars/fruits-api/values.yaml -m \"Enable Portal\" git push dev main Wait for Argocd to synchroize the commit, once the commit is synchronized you should see the following Gloo Portal resources created in the default namespace, kubectl --context = \" ${ CLUSTER1 } \" get apidocs,apiproducts,portal,environment -oname apidoc.portal.gloo.solo.io/fruits-api-apidoc-v1 apiproduct.portal.gloo.solo.io/fruits-api portal.portal.gloo.solo.io/fruits-api environment.portal.gloo.solo.io/fruits-api-dev Now you can open the portal on your browser using the domain http://portal.kameshs.me Tip Update your /etc/hosts as shown to allow accessing the portal using domain names 192 .168.64.100 api.kameshs.me api 192 .168.64.100 portal.kameshs.me portal Where 192.168.64.100 is the Gloo Gateway proxy address $GLOO_GATEWAY_PROXY_IP","title":"Portal"},{"location":"deploy/#enable-authentication","text":"As you have observed by navigating to the APIs that all APIs are read only. To make the portal accessible we need to enable authentication. To enable portal edit and update the $DEMO_HOME/helm_vars/fruits-api/values.yaml enablePortal to true . Commit and push the code to git repository to see the Argocd synchronizing the application to create the new Gloo Portal resources, yq -i e '.enableRBAC=true' $DEMO_HOME /helm_vars/fruits-api/values.yaml git commit $DEMO_HOME /helm_vars/fruits-api/values.yaml -m \"Enable Portal RBAC\" git push dev main Now hit the login button and try login to the portal using the user dev1 and password mysecurepassword . Now when you check the APIs section it has the Try out option that allows you try the APIs. When you try the API from CLI, http api.kameshs.me/fruits/v1/api/fruits You should see you are not authorized, HTTP/1.1 401 Unauthorized content-length: 0 date: Wed, 08 Dec 2021 04:39:54 GMT server: envoy www-authenticate: API key is missing or invalid The enableRBAC generates a default demo API key Nzg4Y2VkODQtZTdlMS1mMzc0LWFhZGMtMGJjNDk4YmM5YTVl that can be used to test the Authentication. http api.kameshs.me/fruits/v1/api/fruits \"api-key: $API_KEY \" The API Key secret is stored in the gloo-system namespace, you can query it using the command: kubectl --context = ${ CLUSTER1 } get secrets -n gloo-system -lusageplans.portal.gloo.solo.io = basic -o yaml | yq e '.items[0].data[\"api-key\"]' - | base64 -d Tip You can also create API Key secret as shown below, make the note of annotations as they are key for Gloo to recognoize the annotation apiVersion: v1 kind: Secret metadata: labels: apiproducts.portal.gloo.solo.io: fruits-product.default environments.portal.gloo.solo.io: dev.default usageplans.portal.gloo.solo.io: apikey name: fruits-apikey-test namespace: gloo-system type: extauth.solo.io/apikey stringData: api-key: Nzg4Y2VkODQtZTdlMS1mMzc0LWFhZGMtMGJjNDk4YmM5YTVl environment: dev plan: basic product: fruits-product.default username: dev1","title":"Enable Authentication"},{"location":"deploy/#monetization","text":"Lets enable access to Admin console of the portal, kubectl --context = \" ${ CLUSTER1 } \" -n gloo-portal port-forward svc/gloo-portal-admin-server 8080 Open the DB Adminer via the browser, export DB_ADMINER_IP = $( kubectl --context = \" ${ CLUSTER1 } \" get svc db-adminer -ojsonpath = '{.status.loadBalancer.ingress[*].ip}' ) Open the url http://$(DB_ADMINER_IP):8080 , use the Postgresql as database with user id postgres and password password . Then run the following SQL command to create the requests tabl using the sql /tmp/gloo-portal-db.sql Lets fire some requests to the API to generate the API calls graph, for i in { 1 ..5 } ; do http api.kameshs.me/fruits/v1/api/fruits \"api-key: $API_KEY \" done As our API plan allows only three requests per minute, you will start to get HTTP 429 after three requests, {{ - if .Values.enablePortal - }} apiVersion : portal.gloo.solo.io/v1beta1 kind : Environment metadata : name : {{ include \"fruits-api.fullname\" . }} -dev namespace : {{ .Release.Namespace }} labels : {{ - include \"fruits-api.labels\" . | nindent 4 }} spec : domains : # the domain name where the API will be exposed - {{ printf \"api.%s\" .Values.portalDomainSuffix }} displayInfo : description : This environment is meant for developers to deploy and test their APIs. displayName : Development {{ if .Values.enableRBAC }} parameters : usagePlans : basic : displayName : Basic plan with API key auth authPolicy : apiKey : { } rateLimit : requestsPerUnit : 3 unit : MINUTE {{ end }} # a global basepath for our APIs basePath : /fruits # we will select our APIProduct using a selector and the 2 version of it apiProducts : - namespaces : - \"*\" labels : - key : app.kubernetes.io/name operator : In values : - {{ include \"fruits-api.name\" . }} versions : names : - v1 # this will dynamically prefix the API with the version names basePath : \"{%version%}\" {{ if .Values.enableRBAC }} usagePlans : - basic {{ end }} gatewayConfig : # we actually want to expose the APIs on a Gateway (optional) disableRoutes : false {{ - end }} But you should see some graphs geneated.","title":"Monetization"},{"location":"env-setup/","text":"At the end of this chapter you will have, Two minikube clusters mgmt and cluster1 mgmt cluster will have Argocd and Gitea git repository manager cluster1 will have Tektoncd, Gloo Edge and Portal deployed Ensure Python venv \u00b6 To create the virtual environment run the following command, direnv allow . The command will instal all the required python modules in the $DEMO_HOME/.direnv . Install the ansible roles and collections that will be used by the playbooks, make install-roles-and-collections Setup Kubernetes Environment \u00b6 With Ansible environment ready we are all good to setup demo environment with required components installed, Minikube clusters \u00b6 The minikube clusters could be created by running: make create-kube-clusters Important The order of the deployment in the following section is crucial as Argocd and Pipelines is dependent on the gitea deployment and its details. Deploy Gitea \u00b6 The Gitea git repository manager could by deployed by running: make deploy-gitea Note It will take few minutes for Gitea to be installed The Gitea details are stored in the file $DEMO_WORK_DIR/gitea-details.yaml . Deploy Argocd \u00b6 The Argocd could by deployed by: make deploy-argocd The Argocd details are stored in the file $DEMO_WORK_DIR/argocd-details.yaml . Deploy Gloo Edge and Portal \u00b6 The Gloo Edge enterprise and portal could be deployed via, make deploy-gloo Deploy Tektoncd \u00b6 The Tektoncd could by deployed by: make deploy-pipelines Extras \u00b6 To make the demo builds faster we will use sonatype nexus repository manager, it be deployed by, make deploy-extras The installation apart from installing the components, it will also download the companion tools such as tkn , gitea , glooctl , kubectl etc., on to $DEMO_HOME/bin . Demo Sources \u00b6 Fruits API GitOps \u00b6 Clone the fruits-api-gitops demo sources from the GitHub repository, cd .. git clone https://github.com/kameshsampath/fruits-api-gitops For convenience, we will refer the clone demo sources folder as $DEMO_HOME , export DEMO_HOME = \" $PWD \" Add the git dev remote to Gitea, export FRUITS_API_GITOPS_REPO_URL = \" $GITEA_URL /gitea/fruits-api-gitops.git\" git remote add dev $FRUITS_API_GITOPS_REPO_URL Commit and push the local code to the dev remote , git commit -a -m \"Demo Setup\" git push dev main Fruits API \u00b6 Clone the fruits-api demo sources, cd .. git clone https://github.com/kameshsampath/fruits-api cd fruits-api Add Gitea repo as dev remote, export FRUITS_API_REPO_URL = \" $GITEA_URL /gitea/fruits-api.git\" git remote add dev $FRUITS_API_REPO_URL Navigate to the gitops sources, cd $DEMO_HOME","title":"Environment Setup"},{"location":"env-setup/#ensure-python-venv","text":"To create the virtual environment run the following command, direnv allow . The command will instal all the required python modules in the $DEMO_HOME/.direnv . Install the ansible roles and collections that will be used by the playbooks, make install-roles-and-collections","title":"Ensure Python venv"},{"location":"env-setup/#setup-kubernetes-environment","text":"With Ansible environment ready we are all good to setup demo environment with required components installed,","title":"Setup Kubernetes Environment"},{"location":"env-setup/#minikube-clusters","text":"The minikube clusters could be created by running: make create-kube-clusters Important The order of the deployment in the following section is crucial as Argocd and Pipelines is dependent on the gitea deployment and its details.","title":"Minikube clusters"},{"location":"env-setup/#deploy-gitea","text":"The Gitea git repository manager could by deployed by running: make deploy-gitea Note It will take few minutes for Gitea to be installed The Gitea details are stored in the file $DEMO_WORK_DIR/gitea-details.yaml .","title":"Deploy Gitea"},{"location":"env-setup/#deploy-argocd","text":"The Argocd could by deployed by: make deploy-argocd The Argocd details are stored in the file $DEMO_WORK_DIR/argocd-details.yaml .","title":"Deploy Argocd"},{"location":"env-setup/#deploy-gloo-edge-and-portal","text":"The Gloo Edge enterprise and portal could be deployed via, make deploy-gloo","title":"Deploy Gloo Edge and Portal"},{"location":"env-setup/#deploy-tektoncd","text":"The Tektoncd could by deployed by: make deploy-pipelines","title":"Deploy Tektoncd"},{"location":"env-setup/#extras","text":"To make the demo builds faster we will use sonatype nexus repository manager, it be deployed by, make deploy-extras The installation apart from installing the components, it will also download the companion tools such as tkn , gitea , glooctl , kubectl etc., on to $DEMO_HOME/bin .","title":"Extras"},{"location":"env-setup/#demo-sources","text":"","title":"Demo Sources"},{"location":"env-setup/#fruits-api-gitops","text":"Clone the fruits-api-gitops demo sources from the GitHub repository, cd .. git clone https://github.com/kameshsampath/fruits-api-gitops For convenience, we will refer the clone demo sources folder as $DEMO_HOME , export DEMO_HOME = \" $PWD \" Add the git dev remote to Gitea, export FRUITS_API_GITOPS_REPO_URL = \" $GITEA_URL /gitea/fruits-api-gitops.git\" git remote add dev $FRUITS_API_GITOPS_REPO_URL Commit and push the local code to the dev remote , git commit -a -m \"Demo Setup\" git push dev main","title":"Fruits API GitOps"},{"location":"env-setup/#fruits-api","text":"Clone the fruits-api demo sources, cd .. git clone https://github.com/kameshsampath/fruits-api cd fruits-api Add Gitea repo as dev remote, export FRUITS_API_REPO_URL = \" $GITEA_URL /gitea/fruits-api.git\" git remote add dev $FRUITS_API_REPO_URL Navigate to the gitops sources, cd $DEMO_HOME","title":"Fruits API"},{"location":"tools-and-sources/","text":"At the end of this chapter you will have the required tools and enviroment ready for running the demo. Download Tools \u00b6 We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows helm brew install helm Install choco install kubernetes-helm yq v4 brew install yq Download Download kustomize brew install kustomize Download choco install kustomize stern brew install stern Download Download httpie Install Install Install direnv Install Install Install Important You will need Gloo Mesh Enterprise License Key to run the demo exercises. If you dont have one, get a trial license from solo.io .","title":"Get Started"},{"location":"tools-and-sources/#download-tools","text":"We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows helm brew install helm Install choco install kubernetes-helm yq v4 brew install yq Download Download kustomize brew install kustomize Download choco install kustomize stern brew install stern Download Download httpie Install Install Install direnv Install Install Install Important You will need Gloo Mesh Enterprise License Key to run the demo exercises. If you dont have one, get a trial license from solo.io .","title":"Download Tools"}]}